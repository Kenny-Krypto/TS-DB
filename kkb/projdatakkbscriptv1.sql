-- MySQL Script generated by MySQL Workbench
-- Sat Dec  5 06:53:32 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema projtestv1
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `projtestv1` ;

-- -----------------------------------------------------
-- Schema projtestv1
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `projtestv1` DEFAULT CHARACTER SET utf8 ;
USE `projtestv1` ;

-- -----------------------------------------------------
-- Table `projtestv1`.`station`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projtestv1`.`station` ;

CREATE TABLE IF NOT EXISTS `projtestv1`.`station` (
  `stationID` INT NOT NULL,
  `name` VARCHAR(100) NULL,
  `city` VARCHAR(50) NULL,
  `state` VARCHAR(50) NULL,
  PRIMARY KEY (`stationID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projtestv1`.`train`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projtestv1`.`train` ;

CREATE TABLE IF NOT EXISTS `projtestv1`.`train` (
  `tid` INT NOT NULL,
  PRIMARY KEY (`tid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projtestv1`.`trainSchedule`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projtestv1`.`trainSchedule` ;

CREATE TABLE IF NOT EXISTS `projtestv1`.`trainSchedule` (
  `transitLine` VARCHAR(50) NOT NULL,
  `depTime` DATETIME NULL,
  `arrivalTime` DATETIME NULL,
  `originStation` INT NULL,
  `desStation` INT NULL,
  `fare` FLOAT NULL,
  `tid` INT NULL,
  PRIMARY KEY (`transitLine`),
  INDEX `originStation_idx` (`originStation` ASC) VISIBLE,
  INDEX `desStation_idx` (`desStation` ASC) VISIBLE,
  INDEX `tid_idx` (`tid` ASC) VISIBLE,
  CONSTRAINT `originStation`
    FOREIGN KEY (`originStation`)
    REFERENCES `projtestv1`.`station` (`stationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `desStation`
    FOREIGN KEY (`desStation`)
    REFERENCES `projtestv1`.`station` (`stationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `tid`
    FOREIGN KEY (`tid`)
    REFERENCES `projtestv1`.`train` (`tid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projtestv1`.`stop`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projtestv1`.`stop` ;

CREATE TABLE IF NOT EXISTS `projtestv1`.`stop` (
  `transitName` VARCHAR(50) NOT NULL,
  `stationID` INT NOT NULL,
  `departTime` DATETIME NULL,
  `arrivalTime` DATETIME NULL,
  PRIMARY KEY (`transitName`, `stationID`))
ENGINE = InnoDB;

USE `projtestv1` ;

-- -----------------------------------------------------
-- procedure searchTrainSchedulesAll
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`searchTrainSchedulesAll`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `searchTrainSchedulesAll`( 
	IN originName varchar(50), IN desName varchar(50), IN ordertype int )
BEGIN
	SELECT ts.transitLine, 
		ts.depTime, 
		ts.arrivalTime, 
		s1.name as originStation,
        s1.city as originCity,
        s1.state as originState,
		s2.name as desStation,
        s2.city as desCity,
        s2.state as desState,
		ts.fare
	FROM (trainSchedule ts
	left JOIN station s1 on ts.originStation = s1.stationid)
	left JOIN station s2 on ts.desStation = s2.stationid
    WHERE s1.name LIKE CONCAT('%', originName, '%') 
    AND s2.name LIKE CONCAT('%', desName, '%')
    ORDER BY 
    CASE  
        WHEN ordertype = 1 THEN UNIX_TIMESTAMP(ts.depTime) 
        WHEN ordertype = 2 THEN UNIX_TIMESTAMP(ts.arrivalTime)
        ELSE ts.transitLine END ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchTrainSchedulesDate
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`searchTrainSchedulesDate`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `searchTrainSchedulesDate`( 
	IN originName varchar(50), IN desName varchar(50), IN dateTravel DATE, IN orderType int )
BEGIN
	SELECT ts.transitLine, 
		ts.depTime, 
		ts.arrivalTime, 
		s1.name as originStation,
        s1.city as originCity,
        s1.state as originState,
		s2.name as desStation,
        s2.city as desCity,
        s2.state as desState,
		ts.fare
	FROM (trainSchedule ts
	left JOIN station s1 on ts.originStation = s1.stationid)
	left JOIN station s2 on ts.desStation = s2.stationid
    WHERE DATE(ts.depTime) = if(dateTravel = '1000-01-01', CURDATE(), dateTravel )
    AND s1.name LIKE CONCAT('%', originName, '%') 
    AND s2.name LIKE CONCAT('%', desName, '%')
    ORDER BY 
    CASE  
        WHEN ordertype = 1 THEN UNIX_TIMESTAMP(ts.depTime) 
        WHEN ordertype = 2 THEN UNIX_TIMESTAMP(ts.arrivalTime)
        ELSE ts.transitLine END ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchTrainSchedulesDateFare
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`searchTrainSchedulesDateFare`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `searchTrainSchedulesDateFare`( 
	IN originName varchar(50), IN desName varchar(50), IN dateTravel DATE )
BEGIN
	SELECT ts.transitLine, 
		ts.depTime, 
		ts.arrivalTime, 
		s1.name as originStation,
        s1.city as originCity,
        s1.state as originState,
		s2.name as desStation,
        s2.city as desCity,
        s2.state as desState,
		ts.fare
	FROM (trainSchedule ts
	left JOIN station s1 on ts.originStation = s1.stationid)
	left JOIN station s2 on ts.desStation = s2.stationid
    WHERE DATE(ts.depTime) = if(dateTravel = '1000-01-01', CURDATE(), dateTravel )
    AND s1.name LIKE CONCAT('%', originName, '%') 
    AND s2.name LIKE CONCAT('%', desName, '%')
    ORDER BY ts.fare ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchTrainSchedulesAllFare
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`searchTrainSchedulesAllFare`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `searchTrainSchedulesAllFare`( 
	IN originName varchar(50), IN desName varchar(50) )
BEGIN
	SELECT ts.transitLine, 
		ts.depTime, 
		ts.arrivalTime, 
		s1.name as originStation,
        s1.city as originCity,
        s1.state as originState,
		s2.name as desStation,
        s2.city as desCity,
        s2.state as desState,
		ts.fare
	FROM (trainSchedule ts
	left JOIN station s1 on ts.originStation = s1.stationid)
	left JOIN station s2 on ts.desStation = s2.stationid
    WHERE s1.name LIKE CONCAT('%', originName, '%') 
    AND s2.name LIKE CONCAT('%', desName, '%')
    ORDER BY ts.fare ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchTrainSchedulesAllFareD
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`searchTrainSchedulesAllFareD`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `searchTrainSchedulesAllFareD`( 
	IN originName varchar(50), IN desName varchar(50) )
BEGIN
	SELECT ts.transitLine, 
		ts.depTime, 
		ts.arrivalTime, 
		s1.name as originStation,
        s1.city as originCity,
        s1.state as originState,
		s2.name as desStation,
        s2.city as desCity,
        s2.state as desState,
		ts.fare
	FROM (trainSchedule ts
	left JOIN station s1 on ts.originStation = s1.stationid)
	left JOIN station s2 on ts.desStation = s2.stationid
    WHERE s1.name LIKE CONCAT('%', originName, '%') 
    AND s2.name LIKE CONCAT('%', desName, '%')
    ORDER BY ts.fare DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchTrainSchedulesAllD
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`searchTrainSchedulesAllD`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `searchTrainSchedulesAllD`( 
	IN originName varchar(50), IN desName varchar(50), IN ordertype int )
BEGIN
	SELECT ts.transitLine, 
		ts.depTime, 
		ts.arrivalTime, 
		s1.name as originStation,
        s1.city as originCity,
        s1.state as originState,
		s2.name as desStation,
        s2.city as desCity,
        s2.state as desState,
		ts.fare
	FROM (trainSchedule ts
	left JOIN station s1 on ts.originStation = s1.stationid)
	left JOIN station s2 on ts.desStation = s2.stationid
    WHERE s1.name LIKE CONCAT('%', originName, '%') 
    AND s2.name LIKE CONCAT('%', desName, '%')
    ORDER BY 
    CASE  
        WHEN ordertype = 1 THEN UNIX_TIMESTAMP(ts.depTime) 
        WHEN ordertype = 2 THEN UNIX_TIMESTAMP(ts.arrivalTime)
        ELSE ts.transitLine END DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchTrainSchedulesDateD
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`searchTrainSchedulesDateD`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `searchTrainSchedulesDateD`( 
	IN originName varchar(50), IN desName varchar(50), IN dateTravel DATE, IN orderType int )
BEGIN
	SELECT ts.transitLine, 
		ts.depTime, 
		ts.arrivalTime, 
		s1.name as originStation,
        s1.city as originCity,
        s1.state as originState,
		s2.name as desStation,
        s2.city as desCity,
        s2.state as desState,
		ts.fare
	FROM (trainSchedule ts
	left JOIN station s1 on ts.originStation = s1.stationid)
	left JOIN station s2 on ts.desStation = s2.stationid
    WHERE DATE(ts.depTime) = if(dateTravel = '1000-01-01', CURDATE(), dateTravel )
    AND s1.name LIKE CONCAT('%', originName, '%') 
    AND s2.name LIKE CONCAT('%', desName, '%')
    ORDER BY 
    CASE  
        WHEN ordertype = 1 THEN UNIX_TIMESTAMP(ts.depTime) 
        WHEN ordertype = 2 THEN UNIX_TIMESTAMP(ts.arrivalTime)
        ELSE ts.transitLine END DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchTrainSchedulesDateFareD
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`searchTrainSchedulesDateFareD`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `searchTrainSchedulesDateFareD`( 
	IN originName varchar(50), IN desName varchar(50), IN dateTravel DATE )
BEGIN
	SELECT ts.transitLine, 
		ts.depTime, 
		ts.arrivalTime, 
		s1.name as originStation,
        s1.city as originCity,
        s1.state as originState,
		s2.name as desStation,
        s2.city as desCity,
        s2.state as desState,
		ts.fare
	FROM (trainSchedule ts
	left JOIN station s1 on ts.originStation = s1.stationid)
	left JOIN station s2 on ts.desStation = s2.stationid
    WHERE DATE(ts.depTime) = if(dateTravel = '1000-01-01', CURDATE(), dateTravel )
    AND s1.name LIKE CONCAT('%', originName, '%') 
    AND s2.name LIKE CONCAT('%', desName, '%')
    ORDER BY ts.fare DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure stops
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`stops`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `stops`( 
	IN transitLine varchar(50))
BEGIN
	SELECT s.transitName, st.name, st.city, st.state, s.departTime, s.arrivalTime
	FROM stop s
    LEFT JOIN station st on s.stationid = st.stationid
    WHERE s.transitName = transitLine
    ORDER BY s.arrivalTime;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure stopsFare
-- -----------------------------------------------------

USE `projtestv1`;
DROP procedure IF EXISTS `projtestv1`.`stopsFare`;

DELIMITER $$
USE `projtestv1`$$
CREATE PROCEDURE `stopsFare`( 
	IN transitL varchar(50))
BEGIN
SELECT s.transitName, st.name, st.city, st.state, s.departTime, s.arrivalTime, s.fare
FROM (
	SELECT stopCount.transitName, stopCount.stationID, stopCount.departTime, stopCount.arrivalTime, 
		stopCount.counter*fareCount.farePerStop as fare
	FROM (
		SELECT s.transitName, s.stationID, s.departTime, s.arrivalTime, s.counter 
		FROM (
			SELECT s.transitName, s.stationID, s.departTime, s.arrivalTime,
				@counter := if (s.transitName = @prev_transitName, @counter + 1, 0) as counter,
				@prev_transitName := s.transitName as x
			FROM stop s, (select @counter := 0, @prev_transitName := null) init
			ORDER BY s.transitName, s.stationID
			) s 
		) stopCount, 
		(SELECT ts.transitLine as tL, ts.fare/(s1.numStops-1) as farePerStop
			FROM trainSchedule ts, 
				(SELECT s.transitName as transitName, Count(*) as numStops
				FROM stop s
				GROUP BY s.transitName) s1
			WHERE ts.transitLine = s1.transitName) 
		fareCount
	WHERE fareCount.tL = stopCount.transitName
	AND fareCount.tL = transitL) s 
    LEFT JOIN station st on s.stationID = st.stationID;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `projtestv1`.`station`
-- -----------------------------------------------------
START TRANSACTION;
USE `projtestv1`;
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (1, 'A', 'APLHA', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (2, 'B', 'BETA', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (3, 'C', 'CHARLIE', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (4, 'D', 'DELTA', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (5, 'E', 'ECHO', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (6, 'F', 'FOXTROT', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (7, 'G', 'GAMMA', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (8, 'H', 'HOTEL', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (9, 'I', 'INDIA', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (10, 'J', 'JUILET', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (11, 'K', 'APLHA', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (12, 'L', 'BETA', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (13, 'M', 'CHARLIE', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (14, 'N', 'DELTA', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (15, 'O', 'ECHO', 'NEW YORK');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (16, 'P', 'FOXFROT', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (17, 'Q', 'GAMMA', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (18, 'R', 'HOTEL', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (19, 'S', 'INDIA', 'NEW JERESY');
INSERT INTO `projtestv1`.`station` (`stationID`, `name`, `city`, `state`) VALUES (20, 'T', 'JUILET', 'NEW YORK');

COMMIT;


-- -----------------------------------------------------
-- Data for table `projtestv1`.`train`
-- -----------------------------------------------------
START TRANSACTION;
USE `projtestv1`;
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (1);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (2);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (3);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (4);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (5);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (6);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (7);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (8);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (9);
INSERT INTO `projtestv1`.`train` (`tid`) VALUES (10);

COMMIT;


-- -----------------------------------------------------
-- Data for table `projtestv1`.`trainSchedule`
-- -----------------------------------------------------
START TRANSACTION;
USE `projtestv1`;
INSERT INTO `projtestv1`.`trainSchedule` (`transitLine`, `depTime`, `arrivalTime`, `originStation`, `desStation`, `fare`, `tid`) VALUES ('AB', '2020-12-01 12:30:00', '2020-12-01 13:00:00', 1, 2, 50, 1);
INSERT INTO `projtestv1`.`trainSchedule` (`transitLine`, `depTime`, `arrivalTime`, `originStation`, `desStation`, `fare`, `tid`) VALUES ('ABC', '2020-12-01 13:30:00', '2020-12-01 15:00:00', 1, 3, 60, 2);
INSERT INTO `projtestv1`.`trainSchedule` (`transitLine`, `depTime`, `arrivalTime`, `originStation`, `desStation`, `fare`, `tid`) VALUES ('DCB', '2020-12-01 23:00:00', '2020-12-02 01:00:00', 5, 2, 40, 3);
INSERT INTO `projtestv1`.`trainSchedule` (`transitLine`, `depTime`, `arrivalTime`, `originStation`, `desStation`, `fare`, `tid`) VALUES ('JC', '2020-12-01 15:00:00', '2020-12-02 08:00:00', 10, 3, 100, 4);
INSERT INTO `projtestv1`.`trainSchedule` (`transitLine`, `depTime`, `arrivalTime`, `originStation`, `desStation`, `fare`, `tid`) VALUES ('CD', '2020-12-02 12:30:00', '2020-12-02 13:30:00', 3, 4, 20, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `projtestv1`.`stop`
-- -----------------------------------------------------
START TRANSACTION;
USE `projtestv1`;
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('AB', 1, '2020-12-01 12:30:00', '2020-12-01 12:20:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('AB', 2, '2020-12-01 13:10:00', '2020-12-01 13:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('ABC', 1, '2020-12-01 13:30:00', '2020-12-01 13:20:30');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('ABC', 2, '2020-12-01 14:10:00', '2020-12-01 14:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('ABC', 3, '2020-12-01 15:10:00', '2020-12-01 15:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('DCB', 4, '2020-12-01 23:00:00', '2020-12-01 22:50:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('DCB', 3, '2020-12-02 00:10:00', '2020-12-02 00:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('DCB', 2, '2020-12-02 01:10:00', '2020-12-02 01:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('JC', 10, '2020-12-01 15:00:00', '2020-12-01 14:40:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('JC', 9, '2020-12-01 17:00:00', '2020-12-01 16:40:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('JC', 8, '2020-12-01 21:00:00', '2020-12-01 20:30:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('JC', 7, '2020-12-02 03:00:00', '2020-12-02 02:30:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('JC', 6, '2020-12-02 05:20:00', '2020-12-02 05:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('JC', 5, '2020-12-02 06:10:00', '2020-12-02 06:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('JC', 4, '2020-12-02 07:10:00', '2020-12-02 07:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('JC', 3, '2020-12-02 08:10:00', '2020-12-02 08:00:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('CD', 4, '2020-12-02 12:30:00', '2020-12-02 12:20:00');
INSERT INTO `projtestv1`.`stop` (`transitName`, `stationID`, `departTime`, `arrivalTime`) VALUES ('CD', 3, '2020-12-02 13:40:00', '2020-12-02 13:30:00');

COMMIT;

